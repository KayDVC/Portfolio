{"ast":null,"code":"var _jsxFileName = \"/Users/kayy/Library/CloudStorage/OneDrive-Personal/Documents/Code Projects/Portfolio/client/src/pages/components/small/TextContainer.tsx\";\nimport React from 'react';\n\n/**\n *   @details : Creates a flexible container for text (and other content). \n * \n *   @Required\n *   @param[in] id:             unique identifier for the section.\n * \n *   @Optional\n *   @param[in] title:    the subheading to display at the top of the container.\n *   @param[in] children: other html/react elements to be displayed within container.\n *   @param[in] extra_styles: extra styles to be applied to the text container. These should be passed as a single string or string literal.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextContainer = _ref => {\n  let {\n    title,\n    id,\n    children,\n    extra_styles\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `textbox-container text ${extra_styles === undefined ? '' : extra_styles}`,\n    id: id,\n    children: [title !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this) : null, children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_c = TextContainer;\nexport default TextContainer;\nvar _c;\n$RefreshReg$(_c, \"TextContainer\");","map":{"version":3,"names":["React","TextContainer","title","id","children","extra_styles","undefined"],"sources":["/Users/kayy/Library/CloudStorage/OneDrive-Personal/Documents/Code Projects/Portfolio/client/src/pages/components/small/TextContainer.tsx"],"sourcesContent":["import React from 'react'\n\n/**\n *   @details : Creates a flexible container for text (and other content). \n * \n *   @Required\n *   @param[in] id:             unique identifier for the section.\n * \n *   @Optional\n *   @param[in] title:    the subheading to display at the top of the container.\n *   @param[in] children: other html/react elements to be displayed within container.\n *   @param[in] extra_styles: extra styles to be applied to the text container. These should be passed as a single string or string literal.\n */\n\ntype Props = {\n    title?: string,\n    id: string,\n    extra_styles?: string,\n    children?: React.ReactNode;\n}\n\nconst TextContainer = ({ title, id, children, extra_styles }: Props) => {\n    return (\n        <div className={`textbox-container text ${extra_styles === undefined ? '' : extra_styles}`} id={id}>\n            { title !== undefined ?\n                <div className='title'>\n                    {title}\n                </div>\n                : null }\n            {children}\n        </div>\n    )\n}\n\nexport default TextContainer"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAmBA,MAAMC,aAAa,GAAG,QAAkD;EAAA,IAAjD;IAAEC,KAAK;IAAEC,EAAE;IAAEC,QAAQ;IAAEC;EAAoB,CAAC;EAC/D,oBACI;IAAK,SAAS,EAAG,0BAAyBA,YAAY,KAAKC,SAAS,GAAG,EAAE,GAAGD,YAAa,EAAE;IAAC,EAAE,EAAEF,EAAG;IAAA,WAC7FD,KAAK,KAAKI,SAAS,gBACjB;MAAK,SAAS,EAAC,OAAO;MAAA,UACjBJ;IAAK;MAAA;MAAA;MAAA;IAAA,QACJ,GACJ,IAAI,EACTE,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACP;AAEd,CAAC;AAAA,KAXKH,aAAa;AAanB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}