{"ast":null,"code":"var _jsxFileName = \"/Users/kayy/Library/CloudStorage/OneDrive-Personal/Documents/Code Projects/Portfolio/client/src/common/contexts/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n/**\n *   @details : Creates a sharable state across the entire app to control the current theme.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext(null);\nvar Mode;\n(function (Mode) {\n  Mode[Mode[\"Light\"] = 0] = \"Light\";\n  Mode[Mode[\"Dark\"] = 1] = \"Dark\";\n})(Mode || (Mode = {}));\nexport const ThemeContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [theme, setTheme] = useState(Mode.Light);\n  const toggleTheme = () => {\n    if (theme === Mode.Light) {\n      setTheme(Mode.Dark);\n    } else {\n      setTheme(Mode.Light);\n    }\n  };\n  const getTheme = () => {\n    return theme === Mode.Light ? \"light\" : \"dark\";\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme,\n      toggleTheme,\n      getTheme\n    },\n    children: [\" \", children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(ThemeContextProvider, \"XUQ09cCuaQ2ZZSHJYRiAcD1hzGc=\");\n_c = ThemeContextProvider;\nexport const useThemeContext = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useThemeContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","ThemeContext","Mode","ThemeContextProvider","children","theme","setTheme","Light","toggleTheme","Dark","getTheme","useThemeContext"],"sources":["/Users/kayy/Library/CloudStorage/OneDrive-Personal/Documents/Code Projects/Portfolio/client/src/common/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react' ;\n\n\n/**\n *   @details : Creates a sharable state across the entire app to control the current theme.\n */\nexport const ThemeContext = createContext<any>(null) ;\n\ntype Props = {\n    children?: React.ReactNode, \n}\n\nenum Mode{\n    Light,\n    Dark,\n}\n\nexport const ThemeContextProvider = ({ children }: Props) => {\n\n    const [theme, setTheme] = useState(Mode.Light) ;\n\n    const toggleTheme = () => {\n        if (theme === Mode.Light) {\n            setTheme(Mode.Dark) ;\n        } else {\n            setTheme(Mode.Light) ;\n        }\n    }\n\n    const getTheme = () => {\n        return theme===Mode.Light ? \"light\" : \"dark\"\n    }\n    \n    return (\n        <ThemeContext.Provider value={{ theme,\n            setTheme,\n            toggleTheme,\n            getTheme, }}> {children} </ThemeContext.Provider>\n    ) \n}\n\nexport const useThemeContext = () => useContext(ThemeContext) ;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAGlE;AACA;AACA;AAFA;AAGA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,CAAM,IAAI,CAAC;AAAE,IAMjDI,IAAI;AAAA,WAAJA,IAAI;EAAJA,IAAI,CAAJA,IAAI;EAAJA,IAAI,CAAJA,IAAI;AAAA,GAAJA,IAAI,KAAJA,IAAI;AAKT,OAAO,MAAMC,oBAAoB,GAAG,QAAyB;EAAA;EAAA,IAAxB;IAAEC;EAAgB,CAAC;EAEpD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAACE,IAAI,CAACK,KAAK,CAAC;EAE9C,MAAMC,WAAW,GAAG,MAAM;IACtB,IAAIH,KAAK,KAAKH,IAAI,CAACK,KAAK,EAAE;MACtBD,QAAQ,CAACJ,IAAI,CAACO,IAAI,CAAC;IACvB,CAAC,MAAM;MACHH,QAAQ,CAACJ,IAAI,CAACK,KAAK,CAAC;IACxB;EACJ,CAAC;EAED,MAAMG,QAAQ,GAAG,MAAM;IACnB,OAAOL,KAAK,KAAGH,IAAI,CAACK,KAAK,GAAG,OAAO,GAAG,MAAM;EAChD,CAAC;EAED,oBACI,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAEF,KAAK;MACjCC,QAAQ;MACRE,WAAW;MACXE;IAAU,CAAE;IAAA,WAAC,GAAC,EAACN,QAAQ,EAAC,GAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QAAwB;AAE7D,CAAC;AAAA,GAtBYD,oBAAoB;AAAA,KAApBA,oBAAoB;AAwBjC,OAAO,MAAMQ,eAAe,GAAG;EAAA;EAAA,OAAMZ,UAAU,CAACE,YAAY,CAAC;AAAA;AAAE,IAAlDU,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}